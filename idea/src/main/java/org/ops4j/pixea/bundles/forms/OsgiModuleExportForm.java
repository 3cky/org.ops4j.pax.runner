/*
 * Copyright 2006 Niclas Hedhman.
 *
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ops4j.pixea.bundles.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;
import org.apache.log4j.Logger;
import org.ops4j.pixea.OsgiResourceBundle;
import org.ops4j.pixea.bundles.editor.DataBeanExport;
import org.ops4j.pixea.module.packages.PackageTreeCellRenderer;
import org.ops4j.pixea.module.packages.PackageTreeCellEditor;
import org.ops4j.pixea.module.packages.PackageInfo;

public class OsgiModuleExportForm
{

    private static final Logger m_logger = Logger.getLogger( OsgiModuleExportForm.class );

    private JPanel m_mainPanel;
    private JTree m_exports;
    private JTable m_properties;
    private DefaultMutableTreeNode m_rootNode;
    private TableModel m_tableModel;

    private void createUIComponents()
    {
        TreeCellRenderer renderer = new PackageTreeCellRenderer();
        m_rootNode = new DefaultMutableTreeNode();
        TreeModel model = new DefaultTreeModel( m_rootNode );
        m_exports = new JTree( model );
        m_exports.setRootVisible( true );
        m_exports.setCellRenderer( renderer );
        m_exports.setCellEditor( new PackageTreeCellEditor() );
        m_exports.setShowsRootHandles( true );
        m_exports.getSelectionModel().setSelectionMode( TreeSelectionModel.SINGLE_TREE_SELECTION );
        m_exports.setEditable( true );
        Vector columnNames = new Vector();
        columnNames.add( OsgiResourceBundle.message( "export.table.column.name" ) );
        columnNames.add( OsgiResourceBundle.message( "export.table.column.value" ) );
        m_tableModel = new DefaultTableModel( columnNames, 5 );
        m_properties = new JTable( m_tableModel );
    }

    public void setData( DataBeanExport data )
    {
        m_rootNode.removeAllChildren();

        for( PackageInfo info : data.getPackages() )
        {
            DefaultMutableTreeNode childNode = new DefaultMutableTreeNode( info );
            info.setExtra( childNode );
            childNode.setAllowsChildren( true );
            PackageInfo parent = info.getParent();
            DefaultMutableTreeNode parentNode;
            if( parent == null )
            {
                parentNode = m_rootNode;
            }
            else
            {
                parentNode = (DefaultMutableTreeNode) parent.getExtra();
            }
            parentNode.add( childNode );
        }
    }

    public void getData( DataBeanExport data )
    {
        ArrayList<PackageInfo> result = new ArrayList<PackageInfo>();
        Enumeration nodes = m_rootNode.breadthFirstEnumeration();
        while( nodes.hasMoreElements() )
        {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) nodes.nextElement();
            if( !node.isRoot() )
            {
                PackageInfo pakkage = (PackageInfo) node.getUserObject();
                if( pakkage.isExported() )
                {
                    result.add( pakkage );
                }
            }
        }
        data.setPackages( result );
    }

    public boolean isModified( DataBeanExport data )
    {
        boolean changeDetected = false;
        for( PackageInfo info : data.getPackages() )
        {
//            if( info.hasChanged() )
//            {
//                changeDetected = true;
//                break;
//            }
        }
        return changeDetected;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection HardCodedStringLiteral
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        m_mainPanel = new JPanel();
        m_mainPanel.setLayout( new GridLayoutManager( 3, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        m_mainPanel.setBorder( BorderFactory.createTitledBorder( BorderFactory.createEtchedBorder(),
                                                                 ResourceBundle.getBundle(
                                                                     "org/ops4j/pixea/runner/idea/OsgiResourceBundle"
                                                                 ).getString( "settings.export.title" )
        )
        );
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$( label1,
                                  ResourceBundle.getBundle( "org/ops4j/pixea/runner/idea/OsgiResourceBundle" ).getString(
                                      "settings.export"
                                  )
        );
        m_mainPanel.add( label1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                      GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                                      GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false
        )
        );
        final JScrollPane scrollPane1 = new JScrollPane();
        m_mainPanel.add( scrollPane1, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                                                           GridConstraints.FILL_BOTH, GridConstraints
            .SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK
                                                                           | GridConstraints.SIZEPOLICY_WANT_GROW, null,
                                                                                                                   null,
                                                                                                                   null,
                                                                                                                   0,
                                                                                                                   false
        )
        );
        scrollPane1.setViewportView( m_exports );
        final JScrollPane scrollPane2 = new JScrollPane();
        m_mainPanel.add( scrollPane2, new GridConstraints( 2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                                                           GridConstraints.FILL_BOTH, GridConstraints
            .SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK
                                                                           | GridConstraints.SIZEPOLICY_WANT_GROW, null,
                                                                                                                   null,
                                                                                                                   null,
                                                                                                                   0,
                                                                                                                   false
        )
        );
        scrollPane2.setViewportView( m_properties );
    }

    private void $$$loadLabelText$$$( JLabel component, String text )
    {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for( int i = 0; i < text.length(); i++ )
        {
            if( text.charAt( i ) == '&' )
            {
                i++;
                if( i == text.length() )
                {
                    break;
                }
                if( !haveMnemonic && text.charAt( i ) != '&' )
                {
                    haveMnemonic = true;
                    mnemonic = text.charAt( i );
                    mnemonicIndex = result.length();
                }
            }
            result.append( text.charAt( i ) );
        }
        component.setText( result.toString() );
        if( haveMnemonic )
        {
            component.setDisplayedMnemonic( mnemonic );
            component.setDisplayedMnemonicIndex( mnemonicIndex );
        }
    }

    public javax.swing.JComponent $$$getRootComponent$$$()
    {
        return m_mainPanel;
    }
}
