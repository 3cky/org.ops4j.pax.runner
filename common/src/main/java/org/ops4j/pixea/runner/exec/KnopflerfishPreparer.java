/*
 * Copyright 2006 Niclas Hedhman.
 *
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ops4j.pax.runner.exec;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.ops4j.io.StreamUtils;
import org.ops4j.pax.runner.PomInfo;
import org.ops4j.pax.runner.RunnerOptions;
import org.ops4j.pax.runner.state.Bundle;
import org.ops4j.pax.runner.utils.FileUtils;

public class KnopflerfishPreparer extends AbstractPreparer
{

    private Properties m_props;

    private static final String FRAMEWORK_GROUPID = "org.knopflerfish.osgi";
    private static final String BUNDLES_GROUPID = "org.knopflerfish.bundle";

    private static final PomInfo[] SYSTEM_BUNDLES =
        {
            new PomInfo( FRAMEWORK_GROUPID, "framework", "2.0.0" )
        };

    private static final PomInfo[] DEFAULT_BUNDLES =
        {
             new PomInfo( BUNDLES_GROUPID + ".useradmin", "useradmin_api", "1.1.0" ),
             new PomInfo( BUNDLES_GROUPID + ".consoletty", "consoletty", "1.0.1" ),
             new PomInfo( BUNDLES_GROUPID + ".frameworkcommands", "frameworkcommands", "1.0.0" ),
             new PomInfo( BUNDLES_GROUPID + ".console", "console", "1.0.0" ),
             new PomInfo( BUNDLES_GROUPID + ".console", "console_api", "1.0.0" ),
             new PomInfo( BUNDLES_GROUPID + ".logcommands", "logcommands", "1.0.1" ),
             new PomInfo( "org.ops4j.pax.logging", "api", "0.9.4" ),
             new PomInfo( "org.ops4j.pax.logging", "service", "0.9.4") ,
             new PomInfo( BUNDLES_GROUPID + ".cm", "cm_api", "1.0.1" )
        };
    private static final PomInfo[] GUI_BUNDLES =
        {
            new PomInfo(  BUNDLES_GROUPID + ".desktop", "desktop_all", "1.2.0" ),
            new PomInfo(  BUNDLES_GROUPID + ".util", "util", "1.0.0" ),
            new PomInfo(  BUNDLES_GROUPID + ".kxml", "kxml", "1.0" ),
            new PomInfo(  BUNDLES_GROUPID + ".metatype", "metatype", "1.0.0" ),
            new PomInfo(  BUNDLES_GROUPID + ".kf_metatype", "kf_metatype", "1.0.0" ),
            new PomInfo(  BUNDLES_GROUPID + ".cm_desktop", "cm_desktop", "1.0.0" )
        };

    public KnopflerfishPreparer( Properties props )
    {
        m_props = props;
    }

    protected PomInfo[] getGuiBundles()
    {
        return GUI_BUNDLES;
    }

    protected PomInfo[] getDefaultBundles()
    {
        return DEFAULT_BUNDLES;
    }

    protected PomInfo[] getSystemBundles()
    {
        return SYSTEM_BUNDLES;
    }

    protected void createConfigFile( RunnerOptions options, List<Bundle> bundles )
        throws IOException
    {
        File f = createPackageListFile( options );
        createConfigFile( f, options, bundles );
    }

    private void createConfigFile( File packageFile, RunnerOptions options, List<Bundle> bundles )
        throws IOException
    {
        File confDir = options.getWorkDir();
        File file = new File( confDir, "init.xargs" );
        if( file.exists() )
        {
            return;
        }
        Writer out = FileUtils.openPropertyFile( file );
        try
        {
            out.write( "#\n# Generated by Pax Runner from http://www.ops4j.org\n#\n" );
            out.write( "#\n" );
            out.write( "# Properties used by both init.xargs and restart.xargs\n" );
            out.write( "#\n" );
            out.write( "\n" );
            out.write( "# The Service Platform ID should be used by bundles needing to\n" );
            out.write( "# a unique ID for the platform itself\n" );
            out.write( "-Dorg.osgi.provisioning.spid=knopflerfish\n" );
            out.write( "-Dorg.osgi.framework.system.packages.file=" );
            out.write( packageFile.getAbsolutePath() );
            out.write( "\n" );
            out.write( "\n" );
            out.write( "# Initial startup verbosity, 0 is low verbosity\n" );
            out.write( "-Dorg.knopflerfish.verbosity=0\n" );
            out.write( "\n" );
            out.write( "# Security\n" );
            out.write( "#-Djava.security.manager=\n" );
            out.write( "#-Djava.security.policy=file:framework.policy\n" );
            out.write( "\n" );
            out.write( "# URL to bundle repository\n" );
            out.write( "-Doscar.repository.url=http://www.knopflerfish.org/repo/repository.xml\n" );
            out.write( "\n" );
            out.write( "# Various debug flags\n" );
            out.write( "-Dorg.knopflerfish.framework.debug.packages=false\n" );
            out.write( "#-Dorg.knopflerfish.framework.debug.packages=true\n" );
            out.write( "-Dorg.knopflerfish.framework.debug.errors=true\n" );
            out.write( "-Dorg.knopflerfish.framework.debug.classloader=false\n" );
            out.write( "#-Dorg.knopflerfish.framework.debug.classloader=true\n" );
            out.write( "-Dorg.knopflerfish.framework.debug.startlevel=false\n" );
            out.write( "-Dorg.knopflerfish.framework.debug.ldap=false\n" );
            out.write( "#-Dorg.knopflerfish.framework.bundlestorage.file.always_unpack=true\n" );
            out.write( "\n" );
            out.write( "# Comma-separated list of packges exported by system classloader\n" );
            out.write( "-Dorg.osgi.framework.system.packages=\n" );
            out.write( "\n" );
            out.write( "# Web server properties\n" );
            out.write( "-Dorg.knopflerfish.http.dnslookup=false\n" );
            out.write( "-Dorg.osgi.service.http.port=8080\n" );
            out.write( "\n" );
            out.write( "-Dorg.knopflerfish.startlevel.use=true\n" );
            out.write( "\n" );
            out.write( "# Log service properties\n" );
            out.write( "-Dorg.knopflerfish.log.out=false\n" );
            out.write( "-Dorg.knopflerfish.log.level=info\n" );
            out.write( "-Dorg.knopflerfish.log.grabio=true\n" );
            out.write( "-Dorg.knopflerfish.log.file=true\n" );
            out.write( "\n" );
            out.write( "#consoletelnet properties\n" );
            out.write( "-Dorg.knopflerfish.consoletelnet.user=admin\n" );
            out.write( "-Dorg.knopflerfish.consoletelnet.pwd=admin\n" );
            out.write( "-Dorg.knopflerfish.consoletelnet.port=8023\n" );

            for( Map.Entry entry : m_props.entrySet() )
            {
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                out.write( "-D" );
                out.write( key );
                out.write( "=" );
                out.write( value );
                out.write( "\n" );
            }
            out.write( "-Dorg.knopflerfish.gosg.jars=file://" + confDir.getAbsolutePath() + "/lib/\n\n" );
            out.write( "-init\n" );
            out.write( "-initlevel 1\n" );
            //TODO fix right start levels from bundle info
            for( Bundle bundle : bundles )
            {
                out.write( "-install " );
                out.write( bundle.toString() );
                out.write( "\n" );
            }
            out.write( "-startlevel 7\n" );
            for( Bundle bundle : bundles )
            {
                out.write( "-start " );
                out.write( bundle.toString() );
                out.write( "\n" );
            }
            out.flush();
        } finally
        {
            out.close();
        }
    }

    private File createPackageListFile( RunnerOptions options )
        throws IOException
    {
        String javaVersion = System.getProperty( "java.version" );
        javaVersion = javaVersion.substring( 0, 3 );
        ClassLoader cl = getClass().getClassLoader();
        String resource = "org/knopflerfish/packages" + javaVersion + ".txt";
        InputStream in = cl.getResourceAsStream( resource );
        if( in == null )
        {
            throw new IllegalStateException( "Resource not found in jar: " + resource );
        }
        File f = new File( options.getWorkDir(), "system-packages.list" );
        FileOutputStream out = new FileOutputStream( f );
        try
        {
            StreamUtils.copyStream( in, out, false );
        } finally
        {
            out.close();
        }
        return f;
    }

}
